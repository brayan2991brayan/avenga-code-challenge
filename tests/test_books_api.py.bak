# tests/test_books_api.py
import pytest
import time
from src.page_objects.books_page import BookData
from src.page_objects import BooksPage

@pytest.fixture
def books_page(api_client):
    """Create a books page object for tests"""
    return BooksPage(api_client)

@pytest.mark.smoke
def test_get_books_list(books_page):
    """Verify we can get the list of books"""
    books = books_page.get_all_books()
    assert isinstance(books, list), "Should return a list of books"
    assert len(books) > 0, "Should have at least one book"
    assert all(isinstance(book, BookData) for book in books)

def test_get_book_by_id(books_page):
    """Verify we can get a specific book"""
    book = books_page.get_book_by_id(1)
    assert book is not None
    assert book.id == 1
    assert book.title

def test_book_not_found(books_page):
    """Verify proper handling of non-existent books"""
    book = books_page.get_book_by_id(999999, expect_found=False)
    assert book is None

def test_crud_operations(books_page):
    """Test create, read, update, and delete operations"""
    # Create a new book
    new_book = BookData(
        title="Test Book",
        description="A test book",
        page_count=100,
        excerpt="Test excerpt",
        publish_date="2025-09-19T00:00:00Z"
    )
    
    # Create
    created_book = books_page.create_book(new_book)
    assert isinstance(created_book, BookData)
    assert created_book.id > 0
    assert created_book.title == new_book.title

    # Read
    time.sleep(0.5)  # Wait for backend sync
    read_book = books_page.get_book_by_id(created_book.id, expect_found=False)
    
    # Update
    if read_book:
        read_book.title = "Updated Title"
        result = books_page.update_book(created_book.id, read_book)
        if result:
            assert result.title == "Updated Title"

    # Delete
    books_page.delete_book(created_book.id)
        excerpt="Test excerpt",
        publish_date="2025-09-19T00:00:00Z"
    )
    created_book = books_page.create_book(new_book)
    assert created_book.id > 0
    assert created_book.title == new_book.title

    # Read the book
    time.sleep(0.5)  # Wait for backend sync
    book = books_page.get_book_by_id(created_book.id, expect_found=False)
    if book:
        assert book.id == created_book.id
        assert book.title == created_book.title

    # Update the book
    updated_data = BookData.from_response(created_book.to_dict())
    updated_data.title = "Updated Title"
    updated_book = books_page.update_book(created_book.id, updated_data)
    if updated_book:
        assert updated_book.title == "Updated Title"

    # Delete the book
    assert books_page.delete_book(created_book.id)

def test_create_book_with_invalid_payload(api_client):
    # missing required fields or invalid types
    bad_payload = {"title": 12345}  # title should be string
    resp = api_client.create_book(bad_payload)
    # Demo API may accept and echo back; be defensive: expect 4xx or 200/201
    assert resp.status_code in (200, 201, 400, 422), f"Unexpected status: {resp.status_code}"
